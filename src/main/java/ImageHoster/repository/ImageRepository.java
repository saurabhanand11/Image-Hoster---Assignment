package ImageHoster.repository;

import ImageHoster.model.Image;
import org.springframework.stereotype.Repository;

import javax.persistence.*;
import java.util.List;

//The annotation is a special type of @Component annotation which describes that the class defines a data repository
@Repository
public class ImageRepository {

    // Get an instance of EntityManagerFactory from persistence unit with name as 'imageHoster'
    @PersistenceUnit(unitName = "imageHoster")
    private EntityManagerFactory emf;

    /**
     * Method to persist the image details in the database
     * The transaction needs to be rolled back in case of any failure/ unsuccessful transaction
     * @param newImage  Image whose details needs to be persisted in the database
     * @return          Image along with the id generated by the database
     */
    public Image uploadImage(Image newImage) {

        EntityManager em = emf.createEntityManager();
        EntityTransaction transaction = em.getTransaction();

        try {
            transaction.begin();
            em.persist(newImage);
            transaction.commit();
        } catch (Exception e) {
            transaction.rollback();
        }
        return newImage;
    }

    /**
     * Method to get all the images from the database
     * @return  List<Image> fetched from the database
     */
    public List<Image> getAllImages() {
        EntityManager em = emf.createEntityManager();
        TypedQuery<Image> query = em.createQuery("SELECT i from Image i", Image.class);
        List<Image> resultList = query.getResultList();

        return resultList;
    }

    /**
     * Method to get image details based on the image's title from the database
     * @param title String that represents the image title
     * @return      Image if found in the database else return null
     */
    public Image getImageByTitle(String title) {
        EntityManager em = emf.createEntityManager();
        try {
            TypedQuery<Image> typedQuery = em.createQuery("SELECT i from Image i where i.title =:title", Image.class)
                    .setParameter("title", title);
            return typedQuery.getSingleResult();
        } catch (NoResultException nre) {
            return null;
        }
    }

    /**
     * Method to get image details based on the image's id fetched from the database
     * @param imageId   Integer that represents the image id
     * @return          Image
     */
    public Image getImage(Integer imageId) {
        EntityManager em = emf.createEntityManager();
        TypedQuery<Image> typedQuery = em.createQuery("SELECT i from Image i where i.id =:imageId", Image.class)
                .setParameter("imageId", imageId);
        Image image = typedQuery.getSingleResult();
        return image;
    }

    /**
     * Method to update image details in the database
     * The transaction needs to be rolled back in case of any failure/ unsuccessful transaction
     * @param updatedImage  Image with updated details
     */
    public void updateImage(Image updatedImage) {
        EntityManager em = emf.createEntityManager();
        EntityTransaction transaction = em.getTransaction();

        try {
            transaction.begin();
            em.merge(updatedImage);
            transaction.commit();
        } catch (Exception e) {
            transaction.rollback();
        }
    }

    /**
     * Method to delete Image from the database
     * The transaction needs to be rolled back in case of any failure/ unsuccessful transaction
     * @param imageId   Integer that represents the id of the image that needs to be deleted
     */
    public void deleteImage(Integer imageId) {
        EntityManager em = emf.createEntityManager();
        EntityTransaction transaction = em.getTransaction();

        try {
            transaction.begin();
            Image image = em.find(Image.class, imageId);
            em.remove(image);
            transaction.commit();
        } catch (Exception e) {
            transaction.rollback();
        }
    }

}
